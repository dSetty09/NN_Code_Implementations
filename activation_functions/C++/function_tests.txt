Linear Function Tests:
	> Test 0:
		- Mine: Linear(0.000000) ==> 0.000000
		- Actual: Linear(0.000000) ==> 0.000000
		- Linear function with 0.000000 as argument evaluates to 0.000000
	> Test 1:
		- Mine: Linear(-0.400000) ==> -0.400000
		- Actual: Linear(-0.400000) ==> -0.400000
		- Linear function with -0.400000 as argument evaluates to -0.400000
	> Test 2:
		- Mine: Linear(-16.000000) ==> -16.000000
		- Actual: Linear(-16.000000) ==> -16.000000
		- Linear function with -16.000000 as argument evaluates to -16.000000
	> Test 3:
		- Mine: Linear(0.700000) ==> 0.700000
		- Actual: Linear(0.700000) ==> 0.700000
		- Linear function with 0.700000 as argument evaluates to 0.700000
	> Test 4:
		- Mine: Linear(22.000000) ==> 22.000000
		- Actual: Linear(22.000000) ==> 22.000000
		- Linear function with 22.000000 as argument evaluates to 22.000000
	> Test 5:
		- Mine: Linear(-inf) ==> -inf
		- Actual: Linear(-inf) ==> -inf
		- Linear function with -inf as argument evaluates to -inf
	> Test 6:
		- Mine: Linear(inf) ==> inf
		- Actual: Linear(inf) ==> inf
		- Linear function with inf as argument evaluates to inf
Sigmoid Function Tests:
	> Test 0:
		- Mine: Sigmoid(0.000000) ==> 0.500000
		- Actual: Sigmoid(0.000000) ==> 0.500000
		- Sigmoid function with 0.000000 as argument evaluates to 0.500000
	> Test 1:
		- Mine: Sigmoid(-0.400000) ==> 0.401312
		- Actual: Sigmoid(-0.400000) ==> 0.401310
		- Sigmoid function with -0.400000 as argument evaluates to 0.401310
	> Test 2:
		- Mine: Sigmoid(-16.000000) ==> 0.000000
		- Actual: Sigmoid(-16.000000) ==> 0.000000
		- Sigmoid function with -16.000000 as argument evaluates to 0.000000
	> Test 3:
		- Mine: Sigmoid(0.700000) ==> 0.668188
		- Actual: Sigmoid(0.700000) ==> 0.668190
		- Sigmoid function with 0.700000 as argument evaluates to 0.668190
	> Test 4:
		- Mine: Sigmoid(22.000000) ==> 1.000000
		- Actual: Sigmoid(22.000000) ==> 1.000000
		- Sigmoid function with 22.000000 as argument evaluates to 1.000000
	> Test 5:
		- Mine: Sigmoid(-inf) ==> 0.000000
		- Actual: Sigmoid(-inf) ==> 0.000000
		- Sigmoid function with -inf as argument evaluates to 0.000000
	> Test 6:
		- Mine: Sigmoid(inf) ==> 1.000000
		- Actual: Sigmoid(inf) ==> 1.000000
		- Sigmoid function with inf as argument evaluates to 1.000000
Tanh Function Tests:
	> Test 0:
		- Mine: Tanh(0.000000) ==> 0.000000
		- Actual: Tanh(0.000000) ==> 0.000000
		- Tanh function with 0.000000 as argument evaluates to 0.000000
	> Test 1:
		- Mine: Tanh(-0.400000) ==> -0.379949
		- Actual: Tanh(-0.400000) ==> -0.379950
		- Tanh function with -0.400000 as argument evaluates to -0.379950
	> Test 2:
		- Mine: Tanh(-16.000000) ==> -1.000000
		- Actual: Tanh(-16.000000) ==> -1.000000
		- Tanh function with -16.000000 as argument evaluates to -1.000000
	> Test 3:
		- Mine: Tanh(0.700000) ==> 0.604368
		- Actual: Tanh(0.700000) ==> 0.604370
		- Tanh function with 0.700000 as argument evaluates to 0.604370
	> Test 4:
		- Mine: Tanh(22.000000) ==> 1.000000
		- Actual: Tanh(22.000000) ==> 1.000000
		- Tanh function with 22.000000 as argument evaluates to 1.000000
	> Test 5:
		- Mine: Tanh(-inf) ==> -1.000000
		- Actual: Tanh(-inf) ==> -1.000000
		- Tanh function with -inf as argument evaluates to -1.000000
	> Test 6:
		- Mine: Tanh(inf) ==> 1.000000
		- Actual: Tanh(inf) ==> 1.000000
		- Tanh function with inf as argument evaluates to 1.000000
Step Function Tests:
	> Test 0:
		- Mine: Step(0.000000) ==> 0.000000
		- Actual: Step(0.000000) ==> 0.000000
		- Step function with 0.000000 as argument evaluates to 0.000000
	> Test 1:
		- Mine: Step(-0.400000) ==> 0.000000
		- Actual: Step(-0.400000) ==> 0.000000
		- Step function with -0.400000 as argument evaluates to 0.000000
	> Test 2:
		- Mine: Step(-16.000000) ==> 0.000000
		- Actual: Step(-16.000000) ==> 0.000000
		- Step function with -16.000000 as argument evaluates to 0.000000
	> Test 3:
		- Mine: Step(0.700000) ==> 1.000000
		- Actual: Step(0.700000) ==> 1.000000
		- Step function with 0.700000 as argument evaluates to 1.000000
	> Test 4:
		- Mine: Step(22.000000) ==> 1.000000
		- Actual: Step(22.000000) ==> 1.000000
		- Step function with 22.000000 as argument evaluates to 1.000000
	> Test 5:
		- Mine: Step(-inf) ==> 0.000000
		- Actual: Step(-inf) ==> 0.000000
		- Step function with -inf as argument evaluates to 0.000000
	> Test 6:
		- Mine: Step(inf) ==> 1.000000
		- Actual: Step(inf) ==> 1.000000
		- Step function with inf as argument evaluates to 1.000000
ReLU Function Tests:
	> Test 0:
		- Mine: ReLU(0.000000) ==> 0.000000
		- Actual: ReLU(0.000000) ==> 0.000000
		- ReLU function with 0.000000 as argument evaluates to 0.000000
	> Test 1:
		- Mine: ReLU(-0.400000) ==> 0.000000
		- Actual: ReLU(-0.400000) ==> 0.000000
		- ReLU function with -0.400000 as argument evaluates to 0.000000
	> Test 2:
		- Mine: ReLU(-16.000000) ==> 0.000000
		- Actual: ReLU(-16.000000) ==> 0.000000
		- ReLU function with -16.000000 as argument evaluates to 0.000000
	> Test 3:
		- Mine: ReLU(0.700000) ==> 0.700000
		- Actual: ReLU(0.700000) ==> 0.700000
		- ReLU function with 0.700000 as argument evaluates to 0.700000
	> Test 4:
		- Mine: ReLU(22.000000) ==> 22.000000
		- Actual: ReLU(22.000000) ==> 22.000000
		- ReLU function with 22.000000 as argument evaluates to 22.000000
	> Test 5:
		- Mine: ReLU(-inf) ==> 0.000000
		- Actual: ReLU(-inf) ==> 0.000000
		- ReLU function with -inf as argument evaluates to 0.000000
	> Test 6:
		- Mine: ReLU(inf) ==> inf
		- Actual: ReLU(inf) ==> inf
		- ReLU function with inf as argument evaluates to inf
LeakyReLU Function Tests:
	> Test 0:
		- Mine: LeakyReLU(0.000000) ==> 0.000000
		- Actual: LeakyReLU(0.000000) ==> 0.000000
		- LeakyReLU function with 0.000000 as argument evaluates to 0.000000
	> Test 1:
		- Mine: LeakyReLU(-0.400000) ==> -0.004000
		- Actual: LeakyReLU(-0.400000) ==> -0.004000
		- LeakyReLU function with -0.400000 as argument evaluates to -0.004000
	> Test 2:
		- Mine: LeakyReLU(-16.000000) ==> -0.160000
		- Actual: LeakyReLU(-16.000000) ==> -0.160000
		- LeakyReLU function with -16.000000 as argument evaluates to -0.160000
	> Test 3:
		- Mine: LeakyReLU(0.700000) ==> 0.700000
		- Actual: LeakyReLU(0.700000) ==> 0.700000
		- LeakyReLU function with 0.700000 as argument evaluates to 0.700000
	> Test 4:
		- Mine: LeakyReLU(22.000000) ==> 22.000000
		- Actual: LeakyReLU(22.000000) ==> 22.000000
		- LeakyReLU function with 22.000000 as argument evaluates to 22.000000
	> Test 5:
		- Mine: LeakyReLU(-inf) ==> -inf
		- Actual: LeakyReLU(-inf) ==> -inf
		- LeakyReLU function with -inf as argument evaluates to -inf
	> Test 6:
		- Mine: LeakyReLU(inf) ==> inf
		- Actual: LeakyReLU(inf) ==> inf
		- LeakyReLU function with inf as argument evaluates to inf
SoftPlus Function Tests:
	> Test 0:
		- Mine: SoftPlus(0.000000) ==> 0.693147
		- Actual: SoftPlus(0.000000) ==> 0.693150
		- SoftPlus function with 0.000000 as argument evaluates to 0.693150
	> Test 1:
		- Mine: SoftPlus(-0.400000) ==> 0.513015
		- Actual: SoftPlus(-0.400000) ==> 0.513020
		- SoftPlus function with -0.400000 as argument evaluates to 0.513020
	> Test 2:
		- Mine: SoftPlus(-16.000000) ==> 0.000000
		- Actual: SoftPlus(-16.000000) ==> 0.000000
		- SoftPlus function with -16.000000 as argument evaluates to 0.000000
	> Test 3:
		- Mine: SoftPlus(0.700000) ==> 1.103186
		- Actual: SoftPlus(0.700000) ==> 1.103190
		- SoftPlus function with 0.700000 as argument evaluates to 1.103190
	> Test 4:
		- Mine: SoftPlus(22.000000) ==> 22.000000
		- Actual: SoftPlus(22.000000) ==> 22.000000
		- SoftPlus function with 22.000000 as argument evaluates to 22.000000
	> Test 5:
		- Mine: SoftPlus(-inf) ==> 0.000000
		- Actual: SoftPlus(-inf) ==> 0.000000
		- SoftPlus function with -inf as argument evaluates to 0.000000
	> Test 6:
		- Mine: SoftPlus(inf) ==> inf
		- Actual: SoftPlus(inf) ==> inf
		- SoftPlus function with inf as argument evaluates to inf
